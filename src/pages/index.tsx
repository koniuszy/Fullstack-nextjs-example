import {
  Container,
  FormControl,
  FormLabel,
  Switch,
  Table,
  TableCaption,
  Tbody,
  Td,
  Tfoot,
  Th,
  Thead,
  Tr,
  IconButton,
} from '@chakra-ui/react'
import { DeleteIcon } from '@chakra-ui/icons'
import { GetStaticProps } from 'next'
import Head from 'next/head'
import { FC } from 'react'

import { usePostListQuery, PostListDocument, useDeletePostMutation } from '../../generated/graphql'
import { addApolloState, initializeApollo } from '../lib/apollo'

const TableTitles: FC = () => (
  <>
    <Th>ID</Th>
    <Th>Title</Th>
    <Th>Text preview</Th>
    <Th>Author name</Th>
    <Th>Actions</Th>
  </>
)

const Home: FC = () => {
  const { data: posts } = usePostListQuery()
  const [deletePostMutation] = useDeletePostMutation()

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container marginTop="10">
        <FormControl display="flex" alignItems="center">
          <FormLabel htmlFor="email-alerts" mb="0">
            Log in as an admin
          </FormLabel>
          <Switch id="email-alerts" />
        </FormControl>

        <Table size="lg" variant="simple">
          <TableCaption>Posts</TableCaption>
          <Thead>
            <Tr>
              <TableTitles />
            </Tr>
          </Thead>
          <Tbody>
            {posts?.postList.map((post) => (
              <Tr key={post.id}>
                <Td>{post.id}</Td>
                <Td>{post.title}</Td>
                <Td>{post.text}</Td>
                <Td>{post.author?.name}</Td>
                <Td>
                  <IconButton
                    onClick={() => deletePostMutation({})}
                    variant="outline"
                    colorScheme="red"
                    aria-label="Send email"
                    icon={<DeleteIcon />}
                  />
                </Td>
              </Tr>
            ))}
          </Tbody>
          <Tfoot>
            <Tr>
              <TableTitles />
            </Tr>
          </Tfoot>
        </Table>
      </Container>
    </>
  )
}

export const getStaticProps: GetStaticProps = async (context) => {
  const apolloClient = initializeApollo()

  await apolloClient.query({
    query: PostListDocument,
  })

  return addApolloState(apolloClient, {
    props: {},
  })
}

export default Home
